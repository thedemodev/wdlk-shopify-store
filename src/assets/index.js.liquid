/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 11);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/*
* @param {node list} triggerList -
* node list of elements that trigger the scroll event
* @param {node list} scrollLayers -
* node list of elements that define the scrollable area
*/
var smoothScrolling = exports.smoothScrolling = function smoothScrolling(triggerList) {
    var scrollLayers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.querySelectorAll(':root');

    if (triggerList.length === 0) {
        return;
    }
    /*
    /* Exponential Ease in and out
    /* http://gizma.com/easing/#expo3
    */
    Math.easeInOutExpo = function (t, b, c, d) {
        t /= d / 2;
        if (t < 1) {
            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
        }
        t--;
        return c / 2 * (-Math.pow(2, -10 * t) + 2) + b;
    };
    var scrollTo = function scrollTo(scrollLayer, el, duration, cb) {
        var startPosition = scrollLayer.scrollTop;
        var positionDelta = el.offsetTop - startPosition;
        var startTime = null;
        // tslint:disable-next-line
        cb = cb || function () {};
        var animateScroll = function animateScroll(timeStamp) {
            startTime = startTime !== null ? startTime : timeStamp;
            var timeDelta = timeStamp - startTime;
            if (timeDelta >= duration) {
                // tslint:disable-next-line
                return cb();
            }
            scrollLayer.scrollTop = Math.easeInOutExpo(timeDelta, startPosition, positionDelta, duration);
            window.requestAnimationFrame(animateScroll);
        };
        window.requestAnimationFrame(animateScroll);
    };
    [].concat(_toConsumableArray(triggerList)).filter(function (el) {
        return el.getAttribute('href');
    }).forEach(function (el) {
        var id = el.getAttribute('href').substr(1) || '';
        var targetEl = document.getElementById('' + id);
        var scroll = function scroll(e) {
            e.preventDefault();
            scrollLayers.forEach(function (layer) {
                scrollTo(layer, targetEl, 1618, function () {
                    window.location.hash = '#' + targetEl.id;
                });
            });
        };
        el.addEventListener('click', scroll, false);
    });
};
var initSmoothScrolling = exports.initSmoothScrolling = function initSmoothScrolling() {
    smoothScrolling(document.querySelectorAll('.js_scroll'));
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var notification = document.querySelector('.js-cookie-notification');
var closeButton = document.querySelector('.js-cookie-notification-close');
var localStorage = window.localStorage;
var notificationHidden = function notificationHidden() {
    return localStorage.getItem('hideCookieNotification');
};
var hideNotification = function hideNotification() {
    localStorage.setItem('hideCookieNotification', 'true');
    notification.style.display = 'none';
};

exports.default = function () {
    if (notificationHidden()) {
        return;
    }
    notification.style.display = 'block';
    closeButton.addEventListener('click', hideNotification);
    closeButton.removeEventListener('click', hideNotification);
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initExpander = exports.resetState = exports.expander = undefined;

var _smoothScrolling = __webpack_require__(0);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var expander = exports.expander = function expander(contentList, paneList) {
    if (paneList.length === 0) {
        return;
    }
    if (contentList.length === 0) {
        return;
    }
    var root = document.querySelector(':root');
    if (root.offsetWidth > 768) {
        return;
    }
    var heightList = [].concat(_toConsumableArray(contentList)).map(function (el) {
        return el.offsetHeight;
    });
    var setCssVariables = function setCssVariables(nodeList, numbers) {
        [].concat(_toConsumableArray(nodeList)).forEach(function (el, i) {
            el.style.setProperty('--pane-height', '' + numbers[i]);
        });
    };
    setCssVariables(paneList, heightList);
};
var resetState = exports.resetState = function resetState(inputList, paneList) {
    if (inputList.length === 0) {
        return;
    }
    var resetPosition = function resetPosition() {
        paneList.forEach(function (pane) {
            pane.scrollTop = 0;
        });
    };
    [].concat(_toConsumableArray(inputList)).forEach(function (input) {
        input.addEventListener('click', resetPosition);
    });
};
var initExpander = exports.initExpander = function initExpander() {
    var panes = document.querySelectorAll('.js_expander');
    resetState(document.querySelectorAll('.js_state'), panes);
    expander(document.querySelectorAll('.js_content'), panes);
    (0, _smoothScrolling.smoothScrolling)(document.querySelectorAll('.js_expander_lead'), panes);
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var fadeThrough = function fadeThrough() {
    var el = document.querySelector('.js_fadeThrough');
    if (!el) {
        return;
    }
    var btnList = document.querySelectorAll('.js_fadeThrough-btn');
    if (!btnList) {
        return;
    }
    var isVisible = false;
    var handleClick = function handleClick(e) {
        isVisible = !isVisible;
        el.style.setProperty('--is-visible', '' + (isVisible ? 1 : 0));
    };
    [].concat(_toConsumableArray(btnList)).forEach(function (btn) {
        btn.addEventListener('click', handleClick);
    });
};
exports.default = fadeThrough;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = instagramFeed;

var _access = __webpack_require__(10);

var _jsonp = __webpack_require__(12);

var _jsonp2 = _interopRequireDefault(_jsonp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function instagramFeed() {
  var node = document.querySelector('.js_instagramFeed');
  if (!node) {
    return;
  }
  if ((typeof Promise === 'undefined' ? 'undefined' : _typeof(Promise)) === undefined) {
    return;
  }
  var feedLimit = 11;
  var instaURL = 'https://api.instagram.com/v1/users/' + _access.access['id'] + '/media/recent/?access_token=' + _access.access['token'] + '&callback=callback';
  // tslint:disable-next-line
  var getMediaFeed = function getMediaFeed(url) {
    return new Promise(function (resolve, reject) {
      (0, _jsonp2.default)(url, function (err, data) {
        if (err) {
          reject(Error('Couldn\'t get Insta JSON feed; error code: + ' + err));
          throw err;
        }
        resolve(data);
      });
    });
  };
  var limitArr = function limitArr(value) {
    return value <= feedLimit;
  };
  var filteredArr = function filteredArr(arr) {
    return arr.filter(function (el, i) {
      return limitArr(i);
    });
  };
  var convertUnixDate = function convertUnixDate(timestamp) {
    var date = new Date(parseInt('' + timestamp, 10));
    return date.toDateString().slice(0, -4);
  };
  var generateFeedTemplate = function generateFeedTemplate(arr) {
    var feedTemplate = arr.map(function (el, i) {
      var thumbnail = '\n        <div class="Feed-thumbnail">\n          <label class="Feed-trigger" for="lightbox-' + i + '" style="background-image: url(' + el.images.standard_resolution.url + '), linear-gradient(35deg, #FFCA54, #FF7163 80%)">\n          </label>\n          <img class="Feed-img"\n            src="' + el.images.standard_resolution.url + '"\n            srcset="' + el.images.thumbnail.url + ' 150w,\n            ' + el.images.low_resolution.url + ' 320w,\n            ' + el.images.standard_resolution.url + ' 640w" />\n        </div>\n      ';
      var media = '\n        <a class="Lightbox-row Feed-media"\n          href="' + el.link + '" target="_blank">\n          <h4 class="Headline Headline--5">\n            Join the journey on Instagram @wdlk\n          </h4>\n          <img class="Feed-img"\n            src="' + el.images.standard_resolution.url + '"\n            srcset="' + el.images.thumbnail.url + ' 150w,\n            ' + el.images.low_resolution.url + ' 320w,\n            ' + el.images.standard_resolution.url + ' 640w" />\n        </a>\n      ';
      var caption = '\n        <figcaption class="Feed-caption Lightbox-row">\n          <strong class="Feed-highlight">' + el.likes.count + ' likes</strong>\n          <time class="Feed-highlight" datetime="' + convertUnixDate(el.created_time) + '">' + convertUnixDate(el.created_time) + '</time>\n          <p class="Feed-copy">\n            <strong>\n              ' + el.user.username + '\n            </strong>\n            ' + el.caption.text + '\n          </p>\n        </figcaption>\n      ';
      var feed = '\n        <li class="Feed-item Lightbox--row">\n          ' + thumbnail + '\n          <input class="Lightbox-state" type="checkbox" id="lightbox-' + i + '" />\n          <div class="Lightbox-shim">\n            <label class="Lightbox-shim-close" for="lightbox-' + i + '"></label>\n            <figure class="Lightbox-content">\n              <header class="Lightbox-header">\n                <h3 class="Headline Headline--6">\n                  #' + el.tags[0] + '\n                </h3>\n                <label class="Lightbox-icon" for="lightbox-' + i + '"></label>\n              </header>\n              ' + media + '\n              ' + caption + '\n            </figure>\n          </div>\n        </li>\n      ';
      return feed;
    });
    node.innerHTML = feedTemplate.join('');
  };
  getMediaFeed(instaURL).then(function (value) {
    return generateFeedTemplate(filteredArr(value.data));
  }, function (reason) {
    console.log('Couldn\'t get Insta JSON feed; error code: + ' + reason);
  });
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = numberInput;

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function numberInput() {
    var nodeList = document.getElementsByClassName('js_numberInput');
    if (!nodeList) {
        return;
    }
    var increase = function increase(n) {
        return parseInt('' + n, 10) + 1;
    };
    var decrease = function decrease(n) {
        return parseInt('' + n, 10) - 1;
    };
    [].concat(_toConsumableArray(nodeList)).forEach(function (node) {
        var inputValue = 1;
        var min = 0;
        var inputEl = node.querySelector('.js_value');
        if (!inputEl) {
            return;
        }
        inputValue = parseInt(inputEl.getAttribute('value'), 10);
        min = parseInt(inputEl.getAttribute('min'), 10);
        node.addEventListener('click', function (e) {
            if (event.target.classList.contains('js_add')) {
                inputValue = increase(inputValue);
                inputEl.setAttribute('value', inputValue.toString());
            }
            if (event.target.classList.contains('js_remove')) {
                if (inputValue <= min) {
                    return;
                }
                inputValue = decrease(inputValue);
                inputEl.setAttribute('value', inputValue.toString());
            }
        });
    });
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = stickyNavigation;
function stickyNavigation() {
    /*
    /* Read Values Only !!!!!
    /* First keep track of the scroll value
    /* without triggering unnecessary draw calls
    */
    var navigation = document.querySelector('.js_sticky-nav');
    if (!navigation) {
        return;
    }
    var notificationTeaser = document.querySelector('.js_notification');
    var options = {
        height: navigation.offsetHeight,
        scrollPosition: 0,
        ticking: false
    };
    var init = function init() {
        navigation.classList.toggle('is-undocked', window.scrollY >= options.height);
    };
    init();
    var getTeaserHeight = function getTeaserHeight() {
        if (!notificationTeaser) {
            return 0;
        }
        return notificationTeaser.offsetHeight;
    };
    /* Visual Updates Callback
    /* Use rAf to handle visual updates and write values
    */
    var update = function update() {
        /*
        /* Pull the latest value when we need it
        */
        var currentScrollPositionY = options.scrollPosition;
        if (notificationTeaser) {
            navigation.classList.toggle('is-sticky', currentScrollPositionY >= getTeaserHeight());
            navigation.classList.toggle('is-undocked', currentScrollPositionY >= getTeaserHeight() - 1);
        } else {
            navigation.classList.toggle('is-undocked', currentScrollPositionY >= options.height);
        }
        options.ticking = false;
    };
    /*
    /* Triggers requestAnimationFrame when it's necessary only
    */
    var requestTick = function requestTick() {
        if (!options.ticking) {
            requestAnimationFrame(update);
        }
        options.ticking = true;
    };
    var onScroll = function onScroll() {
        options.scrollPosition = window.scrollY;
        requestTick();
    };
    window.addEventListener('scroll', onScroll, { capture: false, passive: true });
}

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = fbqTracking;
function fbqTracking() {
    var addToCart = document.querySelector('.js_fbqAddToCart');
    var signUpBtn = document.querySelector('.js_fbqNewsLead');
    if (addToCart) {
        var btn = addToCart.querySelector('.js_fbqBtn');
        var select = addToCart.querySelector('.js_fbqSelect');
        if (btn && select) {
            var productId = parseFloat(select.options[select.selectedIndex].value);
            btn.addEventListener('click', function () {
                fbq('track', 'AddToCart', {
                    content_name: btn.dataset.name,
                    content_ids: ['' + productId],
                    content_type: 'product',
                    value: parseFloat(btn.dataset.value),
                    currency: 'EUR'
                });
            });
        }
    }
    if (signUpBtn) {
        signUpBtn.addEventListener('click', function () {
            fbq('track', 'Lead');
        });
    }
    return;
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = trackingCece;
function trackingCece() {
    var x = document.referrer;
    function set_cece_cookie() {
        var expiration = new Date();
        expiration.setTime(expiration.getTime() + 30 * 24 * 60 * 60 * 1000);
        document.cookie = 'refpartner=projce; expires=' + expiration.toUTCString() + '; path=/';
    }
    if (x.indexOf('projectcece.') > -1) {
        set_cece_cookie();
        if (window.sessionStorage) {
            sessionStorage.setItem('refpartner', 'projce');
        }
    }
    if (window.sessionStorage) {
        if (sessionStorage.getItem('refpartner')) {
            if (document.cookie.indexOf('refpartner=projce') < 0) {
                set_cece_cookie();
            }
        }
    }
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
var access = exports.access = {
    id: '1983140883',
    token: '1983140883.c4c213d.70716b04afc14080a94e4ccb0c35d1b2'
};

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(1);

var _cookieNotification = __webpack_require__(2);

var _cookieNotification2 = _interopRequireDefault(_cookieNotification);

var _fadeThrough = __webpack_require__(4);

var _fadeThrough2 = _interopRequireDefault(_fadeThrough);

var _instagramFeed = __webpack_require__(5);

var _instagramFeed2 = _interopRequireDefault(_instagramFeed);

var _trackingFacebook = __webpack_require__(8);

var _trackingFacebook2 = _interopRequireDefault(_trackingFacebook);

var _numberInput = __webpack_require__(6);

var _numberInput2 = _interopRequireDefault(_numberInput);

var _expander = __webpack_require__(3);

var _smoothScrolling = __webpack_require__(0);

var _stickyNavigation = __webpack_require__(7);

var _stickyNavigation2 = _interopRequireDefault(_stickyNavigation);

var _trackingProjectCece = __webpack_require__(9);

var _trackingProjectCece2 = _interopRequireDefault(_trackingProjectCece);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// tslint:disable-next-line:no-import-side-effect
(0, _trackingFacebook2.default)();
var init = function init() {
    (0, _stickyNavigation2.default)();
    (0, _cookieNotification2.default)();
    (0, _fadeThrough2.default)();
    (0, _expander.initExpander)();
    (0, _smoothScrolling.initSmoothScrolling)();
    (0, _instagramFeed2.default)();
    (0, _trackingProjectCece2.default)();
    (0, _numberInput2.default)();
};
window.addEventListener('load', init);

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Module dependencies
 */

var debug = __webpack_require__(13)('jsonp');

/**
 * Module exports.
 */

module.exports = jsonp;

/**
 * Callback index.
 */

var count = 0;

/**
 * Noop function.
 */

function noop(){}

/**
 * JSONP handler
 *
 * Options:
 *  - param {String} qs parameter (`callback`)
 *  - prefix {String} qs parameter (`__jp`)
 *  - name {String} qs parameter (`prefix` + incr)
 *  - timeout {Number} how long after a timeout error is emitted (`60000`)
 *
 * @param {String} url
 * @param {Object|Function} optional options / callback
 * @param {Function} optional callback
 */

function jsonp(url, opts, fn){
  if ('function' == typeof opts) {
    fn = opts;
    opts = {};
  }
  if (!opts) opts = {};

  var prefix = opts.prefix || '__jp';

  // use the callback name that was passed if one was provided.
  // otherwise generate a unique name by incrementing our counter.
  var id = opts.name || (prefix + (count++));

  var param = opts.param || 'callback';
  var timeout = null != opts.timeout ? opts.timeout : 60000;
  var enc = encodeURIComponent;
  var target = document.getElementsByTagName('script')[0] || document.head;
  var script;
  var timer;


  if (timeout) {
    timer = setTimeout(function(){
      cleanup();
      if (fn) fn(new Error('Timeout'));
    }, timeout);
  }

  function cleanup(){
    if (script.parentNode) script.parentNode.removeChild(script);
    window[id] = noop;
    if (timer) clearTimeout(timer);
  }

  function cancel(){
    if (window[id]) {
      cleanup();
    }
  }

  window[id] = function(data){
    debug('jsonp got', data);
    cleanup();
    if (fn) fn(null, data);
  };

  // add qs component
  url += (~url.indexOf('?') ? '&' : '?') + param + '=' + enc(id);
  url = url.replace('?&', '?');

  debug('jsonp req "%s"', url);

  // create script
  script = document.createElement('script');
  script.src = url;
  target.parentNode.insertBefore(script, target);

  return cancel;
}


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = __webpack_require__(14);
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = __webpack_require__(15);

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}


/***/ }),
/* 15 */
/***/ (function(module, exports) {

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}


/***/ }),
/* 16 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ })
/******/ ]);