@mixin media ($size, $limitor: min-width) {
    @if ($size == xsmall) {
      @media (#{$limitor}: $screen-xs) {
        @content;
      }
    }
    @if ($size == small) {
      @media (#{$limitor}: $screen-sm) {
        @content;
      }
    }
    @if ($size == medium) {
        @media (#{$limitor}: $screen-md) {
            @content;
        }
    }
    @if ($size == large) {
        @media (#{$limitor}: $screen-l) {
            @content;
        }
    }

    @if ($size == xlarge) {
        @media (#{$limitor}: $screen-xl) {
            @content;
        }
    }
}
//-- Media Queries: range from min N value to a max N value.
//-- Variable Arguments are unknown number of arguments.
//-- represented by the ... operator. In this case only accepts two arguments.
@mixin media-range ($range...) {
    @if ($range != null) {
        @media (min-width: nth($range, 1)) and (max-width: nth($range, 2)) {
            @content;
        }
    }
}

//-- Generates the necessary styling for the active indicators.
//-- Depends heavily in nth-of-type pseudo class
//-- and a rigid HTML structure. The mixin should be use on the global space.
//-- This mixins acceps the following parameters:
//-- 1. The amount of indicators
//-- 2. The class of the trigger input
//-- 3. The parent class of the indicators
//-- 4. The class of the indicator item
@mixin generateActiveIndicator ($item-amount, $trigger-selector, $target-parent, $target-selector) {
    @for $i from 1 through $item-amount {
      .#{$trigger-selector} {
        &:checked {
          &:nth-of-type(#{$i}) {
            ~ .#{$target-parent} {
              .#{$target-selector} {
                &:nth-of-type(#{$i}) {
                  @content;
                }
              }
            }
          }
        }
      }
    }
}

@mixin create-pointer ($size: 3rem, $color: var(--background-color), $pseudo-el: before) {
    &::#{$pseudo-el} {
        content: "";
        width: $size;
        height: $size;
        background: $color;
        transform: rotate(45deg);
        @content;
    }
}

@mixin generate-x ($length, $height: .2rem, $color: var(--typo-hex--tertiary)) {
    &::before,
    &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 30%;
        display: block;
        height: $height;
        width: $length;
        background: $color;
    }

    &::before {
        transform: rotate(45deg);
    }

    &::after {
        transform: rotate(135deg);
    }
}


// =======================================
// GRID CREATOR
// =======================================
// The grid-creator mixin automatically creates CSS grid classes in the form of:
//
//   parentclass*--1of2 {
//   width: calc(50% - *gap*);
// }
//
// It takes two arguments:
//   $column-count:   the amount of columns generated
//   $gap:            the width of the gap between the columns
//
// =======================================
//@mixin grid-creator ($column-count, $gap) {
//  // Loop through all columns
//  @for $current-column from 1 to $column-count + 1 {
//    // Loop through the parts of the column (1of4, 2of4, etc.)
//    @for $current-column-part from 1 to $current-column + 1 {
//      // '&--' is used to attach the parent class to the created modifier
//      &--#{$current-column-part}of#{$current-column} {
//        $column-width: ((100% / $current-column) * $current-column-part);
//        // full width columns don't need gaps
//        @if $current-column > 1 {
//          $column-gap: $gap / 2;
//        }
//        @else {
//          $column-gap: 0px;
//        }
//        width: calc(#{$column-width} - #{$column-gap});
//        padding: ($gap / 4);
//      }
//    }
//  }
//}

//
//  Function to create an optimized svg url
//  Version: 1.0.6
//  A PEN BY jakob-e
//  http://codepen.io/jakob-e/pen/doMoML
@function svg-url($svg){
    //
    //  Add missing namespace
    //
    @if not str-index($svg,xmlns) {
        $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
    }
    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        //
        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '&', '%26');
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    @return url("data:image/svg+xml,#{$encoded}");
}

//  Background svg mixin
@mixin background-svg($svg){
    background-image: svg-url($svg);
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
        str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
        $string);
}

@mixin pseudo-svg-uri($svg, $width, $height) {
    &::after {
        content: "";
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        height: $height;
        width: $width;
        margin: auto;
        transition: opacity var(--transition-speed) ease;
        background-image: svg-url($svg);
    }
}

