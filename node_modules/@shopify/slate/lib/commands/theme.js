'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (program) {
  var _this = this;

  program.command('theme [name]').alias('t').description('Generates a new theme directory containing Slate\'s theme boilerplate.').action(function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(name) {
      var dirName, answers, workingDirectory, s3Url, root;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              dirName = name;

              if (dirName) {
                _context.next = 6;
                break;
              }

              _context.next = 4;
              return (0, _inquirer.prompt)({
                type: 'input',
                name: 'dirName',
                message: 'Please enter a directory name for your theme (a new folder will be created):',
                default: 'theme',
                validate: function validate(value) {
                  var validateName = value.match(/^[\w^'@{}[\],$=!#().%+~\- ]+$/);

                  if (validateName) {
                    return true;
                  }

                  return 'A directory name is required.';
                }
              });

            case 4:
              answers = _context.sent;


              dirName = answers.dirName;

            case 6:
              workingDirectory = process.cwd();
              s3Url = 'https://sdks.shopifycdn.com/slate/latest/slate-src.zip';
              root = (0, _path.join)(workingDirectory, dirName);

              if (!(0, _fs.existsSync)(root)) {
                _context.next = 14;
                break;
              }

              console.log('');
              console.error((0, _chalk.red)('  ' + _figures2.default.cross + ' ' + root + ' is not an empty directory'));
              console.log('');
              return _context.abrupt('return', null);

            case 14:

              console.log('');
              console.log('  This may take some time...');
              console.log('');

              (0, _fs.mkdirSync)(root);

              return _context.abrupt('return', (0, _utils.downloadFromUrl)(s3Url, (0, _path.join)(root, 'slate-theme.zip')).then(function (themeZipFile) {
                return (0, _utils.unzip)(themeZipFile, root);
              }).then(function () {
                console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' slate-theme download completed');

                var pkg = (0, _path.join)(root, 'package.json');

                (0, _utils.writePackageJsonSync)(pkg, dirName);

                return (0, _utils.startProcess)('npm', ['install', '@shopify/slate-tools', '--save-dev', '--save-exact'], {
                  cwd: root
                });
              }).then(function () {
                console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' devDependencies installed');
                console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' ' + dirName + ' theme is ready');
                console.log('');

                return null;
              }).catch(function (err) {
                console.error((0, _chalk.red)('  ' + err));

                (0, _rimraf2.default)(root, function () {
                  console.log('');
                  console.log('  Cleaned up theme');
                  console.log('');
                });
              }));

            case 19:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, _this);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

require('babel-polyfill');

var _fs = require('fs');

var _path = require('path');

var _inquirer = require('inquirer');

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _chalk = require('chalk');

var _figures = require('figures');

var _figures2 = _interopRequireDefault(_figures);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }