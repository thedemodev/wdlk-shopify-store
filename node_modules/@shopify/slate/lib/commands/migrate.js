'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (program) {
  var _this = this;

  program.command('migrate').description('Converts an existing theme to work with Slate.').action(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var workingDirectory, answers, configYml, pkgJson, srcDir, iconsDir, stylesDir, scriptsDir, movePromiseFactory, files, whitelistFiles, promises;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            movePromiseFactory = function movePromiseFactory(file) {
              console.log('  Migrating ' + file + ' to src/...');
              return (0, _utils.move)((0, _path.join)(workingDirectory, file), (0, _path.join)(srcDir, file));
            };

            workingDirectory = process.cwd();
            _context.next = 4;
            return (0, _inquirer.prompt)({
              type: 'confirm',
              name: 'confirmation',
              message: 'Warning! This will change your theme\'s folder structure. Are you sure you want to proceed?'
            });

          case 4:
            answers = _context.sent;

            if (answers.confirmation) {
              _context.next = 7;
              break;
            }

            return _context.abrupt('return');

          case 7:
            if ((0, _utils.isShopifyTheme)(workingDirectory)) {
              _context.next = 14;
              break;
            }

            console.log('');
            console.error((0, _chalk.yellow)('  The current directory doesn\'t have /layout/theme.liquid. We have to assume this isn\'t a Shopify theme'));
            console.log('');
            console.error((0, _chalk.red)('  ' + _figures2.default.cross + ' Migration failed'));
            console.log('');
            return _context.abrupt('return');

          case 14:
            configYml = (0, _path.join)(workingDirectory, 'config.yml');
            pkgJson = (0, _path.join)(workingDirectory, 'package.json');
            srcDir = (0, _path.join)(workingDirectory, 'src');
            iconsDir = (0, _path.join)(srcDir, 'icons');
            stylesDir = (0, _path.join)(srcDir, 'styles');
            scriptsDir = (0, _path.join)(srcDir, 'scripts');


            console.log('');
            console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' Your theme is a valid Shopify theme');
            console.log('');

            if (!(0, _fs.existsSync)(srcDir)) {
              _context.next = 30;
              break;
            }

            console.error((0, _chalk.yellow)('  Migrate task could not create a new src directory since your theme already has one'));
            console.error((0, _chalk.yellow)('  Please remove or rename your current src directory'));
            console.log('');
            console.error((0, _chalk.red)('  ' + _figures2.default.cross + ' Migration failed'));
            console.log('');
            return _context.abrupt('return');

          case 30:

            console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' Migration checks completed');
            console.log('');
            console.log('  Starting migration...');
            console.log('');

            (0, _fs.mkdirSync)(srcDir);
            (0, _fs.mkdirSync)(iconsDir);
            (0, _fs.mkdirSync)(stylesDir);
            (0, _fs.mkdirSync)(scriptsDir);

            if (!(0, _fs.existsSync)(pkgJson)) {
              (0, _utils.writePackageJsonSync)(pkgJson);
            }

            files = (0, _fs.readdirSync)(workingDirectory);
            whitelistFiles = files.filter(_utils.isShopifyThemeWhitelistedDir);
            promises = whitelistFiles.map(movePromiseFactory);
            _context.prev = 42;
            _context.next = 45;
            return Promise.all(promises);

          case 45:

            console.log('');
            console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' Migration to src/ completed');
            console.log('');
            console.log('  Installing Slate dependencies...');
            console.log('');

            _context.next = 52;
            return (0, _utils.startProcess)('npm', ['install', '@shopify/slate-tools', '--save-dev', '--save-exact'], { cwd: workingDirectory });

          case 52:

            console.log('');
            console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' Slate dependencies installed');
            console.log('');

            if (!(0, _fs.existsSync)(configYml)) {
              console.error((0, _chalk.yellow)('  Your theme is missing config.yml in the root directory. Please add before using Slate commands'));
              console.error((0, _chalk.yellow)('  Example config.yml here: https://github.com/Shopify/slate/blob/master/config-sample.yml'));
              console.log('');
            }

            console.log('  ' + (0, _chalk.green)(_figures2.default.tick) + ' Migration complete!');
            console.log('');
            _context.next = 66;
            break;

          case 60:
            _context.prev = 60;
            _context.t0 = _context['catch'](42);

            console.error((0, _chalk.red)('  ' + _context.t0));
            console.log('');
            console.error((0, _chalk.red)('  ' + _figures2.default.cross + ' Migration failed. Please check src/ directory'));
            console.log('');

          case 66:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, _this, [[42, 60]]);
  })));
};

require('babel-polyfill');

var _fs = require('fs');

var _path = require('path');

var _inquirer = require('inquirer');

var _chalk = require('chalk');

var _figures = require('figures');

var _figures2 = _interopRequireDefault(_figures);

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }