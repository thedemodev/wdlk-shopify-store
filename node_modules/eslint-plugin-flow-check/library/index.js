'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _check4 = require('./check');

var _check5 = _interopRequireDefault(_check4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	rules: {
		check: function check(context) {
			return {
				Program: function Program(node) {
					var fileName = context.getFilename();
					var fileSource = context.getSourceCode();

					var comments = node.comments.map(function (comment) {
						return comment.value.replace(/\*/g, '').trim();
					});

					var pragma = Boolean(comments.find(function (comment) {
						return comment.startsWith('@flow');
					}));

					var _check2 = (0, _check5.default)(fileSource.text, {
						fileName: fileName,
						pragma: pragma
					}),
					    _check3 = _slicedToArray(_check2, 2),
					    err = _check3[0],
					    reports = _check3[1];

					if (err) {
						context.report({
							loc: {
								start: {
									line: 1
								},
								end: {
									line: 1
								}
							},
							message: 'Error: ' + err.message + ' ' + err.fileName
						});
						return;
					}

					reports.forEach(function (report) {
						return context.report(report);
					});
				}
			};
		}
	}
};
module.exports = exports['default'];