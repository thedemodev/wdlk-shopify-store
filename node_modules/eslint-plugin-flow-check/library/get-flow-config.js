'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _fs = require('fs');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _flowConfigParser = require('flow-config-parser');

var _flowConfigParser2 = _interopRequireDefault(_flowConfigParser);

var _getProjectRoot = require('./get-project-root');

var _getProjectRoot2 = _interopRequireDefault(_getProjectRoot);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = getFlowConfig;


function getFlowConfig(cwd) {
	var projectRoot = (0, _getProjectRoot2.default)(cwd);

	if (!projectRoot) {
		return [null, null];
	}

	var configFilePath = _path2.default.join(projectRoot, '.flowconfig');

	var config = void 0;

	try {
		var configFile = (0, _fs.readFileSync)(configFilePath, 'utf-8');
		config = (0, _flowConfigParser2.default)(configFile);
	} catch (err) {
		err.fileName = configFilePath;
		return [err];
	}

	var _ref = config.get('all') || [false],
	    _ref2 = _slicedToArray(_ref, 1),
	    all = _ref2[0];

	var include = config.get('include').map(function (item) {
		return item.replace('<PROJECT_ROOT>', projectRoot);
	});

	var ignore = config.get('ignore').map(function (item) {
		return item.toString();
	}).map(function (item) {
		return item.substr(1, item.length - 2);
	}).map(function (item) {
		return item.replace(/\\/g, '');
	}).map(function (item) {
		return item.replace(/\.\*/g, '**');
	}).map(function (item) {
		return item.replace('<PROJECT_ROOT>', projectRoot);
	});

	return [null, {
		all: all === 'true',
		include: include,
		ignore: ignore
	}];
}
module.exports = exports['default'];